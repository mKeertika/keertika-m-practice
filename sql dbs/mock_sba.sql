use sba_mockup;

-- Create a query to return all orders made by users with the first name of “Marion” 
SELECT 
    o.order_id, o.user_id, o.store_id
FROM
    users u
        INNER JOIN
    orders o USING (user_id)
WHERE
    u.FIRST_NAME = 'Marion';


-- 2. Create a query to select all users that have not made an order 
SELECT 
    u.user_id, u.First_name, u.last_name, u.city
FROM
    users u
        LEFT JOIN
    orders o USING (user_id)
WHERE
    o.order_id IS NULL;


-- 3. Create a Query to select the names and 
-- prices of all items that have been part of 2 or 
-- more separate orders. 
SELECT 
    i.name, i.price
FROM
    items i
        JOIN
    order_items oi USING (item_id)
        INNER JOIN
    orders o USING (order_id)
GROUP BY i.name
HAVING COUNT(o.order_id) >= 2;


-- 4. Create a query to return the Order Id, Item name, 
-- Item Price, and Quantity from orders made at stores in
--  the city “New York”. Order by Order Id in ascending order. 
SELECT 
    oi.order_id, i.name, i.price, oi.quantity
FROM
    items i
        INNER JOIN
    order_items oi USING (item_id)
        INNER JOIN
    orders o USING (order_id)
        INNER JOIN
    stores s USING (store_id)
WHERE
    s.city = 'New York'
ORDER BY oi.order_id;
 
-- 5. Your boss would like you to create a query that 
-- calculates the total revenue generated by each item.
--  Revenue for an item can be found as 
--  (Item Price * Total Quantity 
-- Ordered). Please return the first column as ‘ITEM_NAME’ 
-- and the second column as ‘REVENUE’. 

SELECT 
    i.name AS 'Item_Name',
    SUM(i.price * oi.quantity) AS 'Revenue'
FROM
    items i
        LEFT JOIN
    order_items oi USING (item_id)
GROUP BY i.item_id
ORDER BY 2 DESC;


-- 6. Create a query with the following output: 
-- a. Column 1 - Store Name   i. The name of each store 
-- b. Column 2 - Order Quantity 
-- i. The number of times an order has been made in this store 
-- c. Column 3 - Sales Figure 
-- i. If the store has been involved in more than 3 orders,
--  mark as ‘High’ 
-- ii. If the store has been involved in less than 3 orders 
-- but more than 1 order, 
-- mark as ‘Medium’ 
-- iii. If the store has been involved with 1 or less orders,
--  mark as ‘Low’ 
-- d. Should be ordered by the Order Quantity in Descending Order 

SELECT 
    s.name AS 'Store Name',
    COUNT(o.order_id) AS 'Order Quantity',
    CASE
        WHEN COUNT(o.order_id) > 3 THEN 'HIGH'
        WHEN COUNT(o.order_id) > 1 THEN 'MDEIUM'
        WHEN COUNT(o.order_id) >= 0 THEN 'LOW'
    END AS 'Sales Figure'
FROM
    stores s
        INNER JOIN
    orders o USING (store_id)
GROUP BY s.name
ORDER BY 2 DESC;